(define (miller-rabin-test n)
  (define (try-it a)
    (= (expmod a (- n 1) n) 1))
  (try-it (+ 1 (random (- n 1)))))

(define (fast-prime? n times)
  (cond ((= times 0) true)
        ((miller-rabin-test n) (fast-prime? n (- times 1)))
        (else false)))

(define (expmod base exp m)
  (cond ((= exp 0) 1)
        ((and (even? exp) (trivial? base m)) 
         (remainder (square (expmod base (/ exp 2) m))
                    m))
        ((and (odd? exp) (trivial? base m))
         (remainder (* base (expmod base (- exp 1) m))
                    m))
        (else 0))
  )

(define (trivial? test-num n)
  (cond ((or (= test-num 1) (= test-num (- n 1))) true)
        ((= (remainder (square test-num)  n) 1) false)
        (else true)))
