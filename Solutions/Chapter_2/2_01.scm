;(define (make-rat n d)
;  (let ((g (gcd (abs n) (abs d))))
;    (if (or (and (< n 0) (> d 0)) 
;            (and (> n 0) (< d 0))) 
;      (cons (- (/ (abs n) g)) (/ (abs d) g))
;      (cons (/ (abs n) g) (/ (abs d) g)))))

(define (make-rat n d)
  (let ((g (gcd (abs n) (abs d))))
    (if (< (* n d) 0) 
      (cons (- (/ (abs n) g)) (/ (abs d) g))
      (cons (/ (abs n) g) (/ (abs d) g)))))
